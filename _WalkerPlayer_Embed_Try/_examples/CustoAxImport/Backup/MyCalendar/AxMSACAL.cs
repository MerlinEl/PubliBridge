using System;
using System.Drawing;
using System.Diagnostics;
using System.Windows.Forms;

namespace CustoAxImport 
{
	/// <summary>
	/// AxImp generated AxCalendar class 
	/// </summary>
    
    
	[System.Windows.Forms.AxHost.ClsidAttribute("{8e27c92b-1264-101c-8a2f-040224009c02}")]
	[System.ComponentModel.DesignTimeVisibleAttribute(true)]
	[System.ComponentModel.DefaultEvent("AfterUpdate")]
	[System.ComponentModel.DefaultProperty("_Value")]
	//This attribute is not generated by AxImp, we need to add it here so AxCalendar control can be added into
	//VS.NET toolbox
	[System.ComponentModel.ToolboxItem(true)]
	public class AxCalendar : System.Windows.Forms.AxHost 
	{
        //The following private fields are AxImp generated.
		//we need to change their visiblilty to protected 
		//so AxCalendar class can be subclassable
		//private MSACAL.ICalendar ocx;
		//private AxCalendarEventMulticaster eventMulticaster;
		//private System.Windows.Forms.AxHost.ConnectionPointCookie cookie;
		protected MSACAL.ICalendar ocx;
		protected AxCalendarEventMulticaster eventMulticaster;
		protected System.Windows.Forms.AxHost.ConnectionPointCookie cookie;
        
		public AxCalendar() : 
			base("8e27c92b-1264-101c-8a2f-040224009c02") 
		{
			this.SetAboutBoxDelegate(new AboutBoxDelegate(AboutBox));
		}
        
		[System.ComponentModel.Browsable(true)]
		[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
		[System.Runtime.InteropServices.DispIdAttribute(-501)]
		[System.Runtime.InteropServices.ComAliasNameAttribute("System.UInt32")]
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public override System.Drawing.Color BackColor 
		{
			get 
			{
				if (((this.ocx != null) 
					&& (this.PropsValid() == true))) 
				{
					return GetColorFromOleColor(((System.UInt32)(this.ocx.BackColor)));
				}
				else 
				{
					return base.BackColor;
				}
			}
			set 
			{
				base.BackColor = value;
				if ((this.ocx != null)) 
				{
					this.ocx.BackColor = ((System.UInt32)(GetOleColorFromColor(value)));
				}
			}
		}
        
		[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
		[System.Runtime.InteropServices.DispIdAttribute(17)]
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual short Day 
		{
			get 
			{
				if ((this.ocx == null)) 
				{
					throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Day", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
				}
				return this.ocx.Day;
			}
			set 
			{
				if ((this.ocx == null)) 
				{
					throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Day", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
				}
				this.ocx.Day = value;
			}
		}
        
		[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
		[System.Runtime.InteropServices.DispIdAttribute(1)]
		[System.Runtime.InteropServices.ComAliasNameAttribute("stdole.IFontDisp")]
		public virtual System.Drawing.Font DayFont 
		{
			get 
			{
				if ((this.ocx == null)) 
				{
					throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("DayFont", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
				}
				return GetFontFromIFont(this.ocx.DayFont);
			}
			set 
			{
				if ((this.ocx == null)) 
				{
					throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("DayFont", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
				}
				this.ocx.DayFont = ((stdole.IFontDisp)(GetIFontFromFont(value)));
			}
		}
        
		[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
		[System.Runtime.InteropServices.DispIdAttribute(2)]
		[System.Runtime.InteropServices.ComAliasNameAttribute("System.UInt32")]
		public virtual System.Drawing.Color DayFontColor 
		{
			get 
			{
				if ((this.ocx == null)) 
				{
					throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("DayFontColor", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
				}
				return GetColorFromOleColor(((System.UInt32)(this.ocx.DayFontColor)));
			}
			set 
			{
				if ((this.ocx == null)) 
				{
					throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("DayFontColor", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
				}
				this.ocx.DayFontColor = ((System.UInt32)(GetOleColorFromColor(value)));
			}
		}
        
		[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
		[System.Runtime.InteropServices.DispIdAttribute(18)]
		public virtual short DayLength 
		{
			get 
			{
				if ((this.ocx == null)) 
				{
					throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("DayLength", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
				}
				return this.ocx.DayLength;
			}
			set 
			{
				if ((this.ocx == null)) 
				{
					throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("DayLength", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
				}
				this.ocx.DayLength = value;
			}
		}
        
		[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
		[System.Runtime.InteropServices.DispIdAttribute(19)]
		public virtual short FirstDay 
		{
			get 
			{
				if ((this.ocx == null)) 
				{
					throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("FirstDay", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
				}
				return this.ocx.FirstDay;
			}
			set 
			{
				if ((this.ocx == null)) 
				{
					throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("FirstDay", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
				}
				this.ocx.FirstDay = value;
			}
		}
        
		[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
		[System.Runtime.InteropServices.DispIdAttribute(20)]
		public virtual int GridCellEffect 
		{
			get 
			{
				if ((this.ocx == null)) 
				{
					throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GridCellEffect", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
				}
				return this.ocx.GridCellEffect;
			}
			set 
			{
				if ((this.ocx == null)) 
				{
					throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GridCellEffect", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
				}
				this.ocx.GridCellEffect = value;
			}
		}
        
		[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
		[System.Runtime.InteropServices.DispIdAttribute(3)]
		[System.Runtime.InteropServices.ComAliasNameAttribute("stdole.IFontDisp")]
		public virtual System.Drawing.Font GridFont 
		{
			get 
			{
				if ((this.ocx == null)) 
				{
					throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GridFont", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
				}
				return GetFontFromIFont(this.ocx.GridFont);
			}
			set 
			{
				if ((this.ocx == null)) 
				{
					throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GridFont", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
				}
				this.ocx.GridFont = ((stdole.IFontDisp)(GetIFontFromFont(value)));
			}
		}
        
		[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
		[System.Runtime.InteropServices.DispIdAttribute(4)]
		[System.Runtime.InteropServices.ComAliasNameAttribute("System.UInt32")]
		public virtual System.Drawing.Color GridFontColor 
		{
			get 
			{
				if ((this.ocx == null)) 
				{
					throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GridFontColor", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
				}
				return GetColorFromOleColor(((System.UInt32)(this.ocx.GridFontColor)));
			}
			set 
			{
				if ((this.ocx == null)) 
				{
					throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GridFontColor", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
				}
				this.ocx.GridFontColor = ((System.UInt32)(GetOleColorFromColor(value)));
			}
		}
        
		[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
		[System.Runtime.InteropServices.DispIdAttribute(13)]
		[System.Runtime.InteropServices.ComAliasNameAttribute("System.UInt32")]
		public virtual System.Drawing.Color GridLinesColor 
		{
			get 
			{
				if ((this.ocx == null)) 
				{
					throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GridLinesColor", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
				}
				return GetColorFromOleColor(((System.UInt32)(this.ocx.GridLinesColor)));
			}
			set 
			{
				if ((this.ocx == null)) 
				{
					throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GridLinesColor", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
				}
				this.ocx.GridLinesColor = ((System.UInt32)(GetOleColorFromColor(value)));
			}
		}
        
		[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
		[System.Runtime.InteropServices.DispIdAttribute(16)]
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual short Month 
		{
			get 
			{
				if ((this.ocx == null)) 
				{
					throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Month", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
				}
				return this.ocx.Month;
			}
			set 
			{
				if ((this.ocx == null)) 
				{
					throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Month", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
				}
				this.ocx.Month = value;
			}
		}
        
		[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
		[System.Runtime.InteropServices.DispIdAttribute(21)]
		public virtual short MonthLength 
		{
			get 
			{
				if ((this.ocx == null)) 
				{
					throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MonthLength", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
				}
				return this.ocx.MonthLength;
			}
			set 
			{
				if ((this.ocx == null)) 
				{
					throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MonthLength", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
				}
				this.ocx.MonthLength = value;
			}
		}
        
		[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
		[System.Runtime.InteropServices.DispIdAttribute(5)]
		public virtual bool ShowDateSelectors 
		{
			get 
			{
				if ((this.ocx == null)) 
				{
					throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ShowDateSelectors", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
				}
				return this.ocx.ShowDateSelectors;
			}
			set 
			{
				if ((this.ocx == null)) 
				{
					throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ShowDateSelectors", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
				}
				this.ocx.ShowDateSelectors = value;
			}
		}
        
		[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
		[System.Runtime.InteropServices.DispIdAttribute(6)]
		public virtual bool ShowDays 
		{
			get 
			{
				if ((this.ocx == null)) 
				{
					throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ShowDays", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
				}
				return this.ocx.ShowDays;
			}
			set 
			{
				if ((this.ocx == null)) 
				{
					throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ShowDays", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
				}
				this.ocx.ShowDays = value;
			}
		}
        
		[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
		[System.Runtime.InteropServices.DispIdAttribute(7)]
		public virtual bool ShowHorizontalGrid 
		{
			get 
			{
				if ((this.ocx == null)) 
				{
					throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ShowHorizontalGrid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
				}
				return this.ocx.ShowHorizontalGrid;
			}
			set 
			{
				if ((this.ocx == null)) 
				{
					throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ShowHorizontalGrid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
				}
				this.ocx.ShowHorizontalGrid = value;
			}
		}
        
		[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
		[System.Runtime.InteropServices.DispIdAttribute(8)]
		public virtual bool ShowTitle 
		{
			get 
			{
				if ((this.ocx == null)) 
				{
					throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ShowTitle", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
				}
				return this.ocx.ShowTitle;
			}
			set 
			{
				if ((this.ocx == null)) 
				{
					throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ShowTitle", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
				}
				this.ocx.ShowTitle = value;
			}
		}
        
		[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
		[System.Runtime.InteropServices.DispIdAttribute(9)]
		public virtual bool ShowVerticalGrid 
		{
			get 
			{
				if ((this.ocx == null)) 
				{
					throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ShowVerticalGrid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
				}
				return this.ocx.ShowVerticalGrid;
			}
			set 
			{
				if ((this.ocx == null)) 
				{
					throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ShowVerticalGrid", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
				}
				this.ocx.ShowVerticalGrid = value;
			}
		}
        
		[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
		[System.Runtime.InteropServices.DispIdAttribute(10)]
		[System.Runtime.InteropServices.ComAliasNameAttribute("stdole.IFontDisp")]
		public virtual System.Drawing.Font TitleFont 
		{
			get 
			{
				if ((this.ocx == null)) 
				{
					throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("TitleFont", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
				}
				return GetFontFromIFont(this.ocx.TitleFont);
			}
			set 
			{
				if ((this.ocx == null)) 
				{
					throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("TitleFont", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
				}
				this.ocx.TitleFont = ((stdole.IFontDisp)(GetIFontFromFont(value)));
			}
		}
        
		[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
		[System.Runtime.InteropServices.DispIdAttribute(11)]
		[System.Runtime.InteropServices.ComAliasNameAttribute("System.UInt32")]
		public virtual System.Drawing.Color TitleFontColor 
		{
			get 
			{
				if ((this.ocx == null)) 
				{
					throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("TitleFontColor", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
				}
				return GetColorFromOleColor(((System.UInt32)(this.ocx.TitleFontColor)));
			}
			set 
			{
				if ((this.ocx == null)) 
				{
					throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("TitleFontColor", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
				}
				this.ocx.TitleFontColor = ((System.UInt32)(GetOleColorFromColor(value)));
			}
		}
        
		[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
		[System.Runtime.InteropServices.DispIdAttribute(12)]
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Default)]
		public virtual object Value 
		{
			get 
			{
				if ((this.ocx == null)) 
				{
					throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Value", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
				}
				return this.ocx.Value;
			}
			set 
			{
				if ((this.ocx == null)) 
				{
					throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Value", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
				}
				this.ocx.Value = value;
			}
		}
        
		[System.ComponentModel.Browsable(false)]
		[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
		[System.Runtime.InteropServices.DispIdAttribute(0)]
		public virtual object _Value 
		{
			get 
			{
				if ((this.ocx == null)) 
				{
					throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("_Value", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
				}
				return this.ocx._Value;
			}
			set 
			{
				if ((this.ocx == null)) 
				{
					throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("_Value", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
				}
				this.ocx._Value = value;
			}
		}
        
		[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
		[System.Runtime.InteropServices.DispIdAttribute(14)]
		public virtual bool ValueIsNull 
		{
			get 
			{
				if ((this.ocx == null)) 
				{
					throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ValueIsNull", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
				}
				return this.ocx.ValueIsNull;
			}
			set 
			{
				if ((this.ocx == null)) 
				{
					throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ValueIsNull", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
				}
				this.ocx.ValueIsNull = value;
			}
		}
        
		[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
		[System.Runtime.InteropServices.DispIdAttribute(15)]
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual short Year 
		{
			get 
			{
				if ((this.ocx == null)) 
				{
					throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Year", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
				}
				return this.ocx.Year;
			}
			set 
			{
				if ((this.ocx == null)) 
				{
					throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Year", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
				}
				this.ocx.Year = value;
			}
		}
        
		public event System.EventHandler NewYear;
        
		public event System.EventHandler NewMonth;
        
		public event System.EventHandler AfterUpdate;
        
		public event DCalendarEvents_BeforeUpdateEventHandler BeforeUpdate;
        
		public event DCalendarEvents_KeyUpEventHandler KeyUpEvent;
        
		public event DCalendarEvents_KeyPressEventHandler KeyPressEvent;
        
		public event DCalendarEvents_KeyDownEventHandler KeyDownEvent;
        
		public event System.EventHandler DblClick;
        
		public event System.EventHandler ClickEvent;
        
		public virtual void AboutBox() 
		{
			if ((this.ocx == null)) 
			{
				throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AboutBox", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
			}
			this.ocx.AboutBox();
		}
        
		public virtual void Today() 
		{
			if ((this.ocx == null)) 
			{
				throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Today", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
			}
			this.ocx.Today();
		}
        
		public virtual void CtlRefresh() 
		{
			if ((this.ocx == null)) 
			{
				throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CtlRefresh", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
			}
			this.ocx.Refresh();
		}
        
		public virtual void PreviousYear() 
		{
			if ((this.ocx == null)) 
			{
				throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("PreviousYear", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
			}
			this.ocx.PreviousYear();
		}
        
		public virtual void PreviousWeek() 
		{
			if ((this.ocx == null)) 
			{
				throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("PreviousWeek", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
			}
			this.ocx.PreviousWeek();
		}
        
		public virtual void PreviousMonth() 
		{
			if ((this.ocx == null)) 
			{
				throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("PreviousMonth", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
			}
			this.ocx.PreviousMonth();
		}
        
		public virtual void PreviousDay() 
		{
			if ((this.ocx == null)) 
			{
				throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("PreviousDay", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
			}
			this.ocx.PreviousDay();
		}
        
		public virtual void NextYear() 
		{
			if ((this.ocx == null)) 
			{
				throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("NextYear", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
			}
			this.ocx.NextYear();
		}
        
		public virtual void NextWeek() 
		{
			if ((this.ocx == null)) 
			{
				throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("NextWeek", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
			}
			this.ocx.NextWeek();
		}
        
		public virtual void NextMonth() 
		{
			if ((this.ocx == null)) 
			{
				throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("NextMonth", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
			}
			this.ocx.NextMonth();
		}
        
		public virtual void NextDay() 
		{
			if ((this.ocx == null)) 
			{
				throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("NextDay", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
			}
			this.ocx.NextDay();
		}
        
		protected override void CreateSink() 
		{
			try 
			{
				this.eventMulticaster = new AxCalendarEventMulticaster(this);
				this.cookie = new System.Windows.Forms.AxHost.ConnectionPointCookie(this.ocx, this.eventMulticaster, typeof(MSACAL.DCalendarEvents));
			}
			catch (System.Exception ) 
			{
			}
		}
        
		protected override void DetachSink() 
		{
			try 
			{
				this.cookie.Disconnect();
			}
			catch (System.Exception ) 
			{
			}
		}
        
		protected override void AttachInterfaces() 
		{
			try 
			{
				this.ocx = ((MSACAL.ICalendar)(this.GetOcx()));
			}
			catch (System.Exception ) 
			{
			}
		}
        
		internal void RaiseOnNewYear(object sender, System.EventArgs e) 
		{
			if ((this.NewYear != null)) 
			{
				this.NewYear(sender, e);
			}
		}
        
		internal void RaiseOnNewMonth(object sender, System.EventArgs e) 
		{
			if ((this.NewMonth != null)) 
			{
				this.NewMonth(sender, e);
			}
		}
        
		internal void RaiseOnAfterUpdate(object sender, System.EventArgs e) 
		{
			if ((this.AfterUpdate != null)) 
			{
				this.AfterUpdate(sender, e);
			}
		}
        
		internal void RaiseOnBeforeUpdate(object sender, DCalendarEvents_BeforeUpdateEvent e) 
		{
			if ((this.BeforeUpdate != null)) 
			{
				this.BeforeUpdate(sender, e);
			}
		}
        
		internal void RaiseOnKeyUpEvent(object sender, DCalendarEvents_KeyUpEvent e) 
		{
			if ((this.KeyUpEvent != null)) 
			{
				this.KeyUpEvent(sender, e);
			}
		}
        
		internal void RaiseOnKeyPressEvent(object sender, DCalendarEvents_KeyPressEvent e) 
		{
			if ((this.KeyPressEvent != null)) 
			{
				this.KeyPressEvent(sender, e);
			}
		}
        
		internal void RaiseOnKeyDownEvent(object sender, DCalendarEvents_KeyDownEvent e) 
		{
			if ((this.KeyDownEvent != null)) 
			{
				this.KeyDownEvent(sender, e);
			}
		}
        
		internal void RaiseOnDblClick(object sender, System.EventArgs e) 
		{
			if ((this.DblClick != null)) 
			{
				this.DblClick(sender, e);
			}
		}
        
		internal void RaiseOnClickEvent(object sender, System.EventArgs e) 
		{

			if ((this.ClickEvent != null)) 
			{
				this.ClickEvent(sender, e);
			}
		}

	}
    
	public delegate void DCalendarEvents_BeforeUpdateEventHandler(object sender, DCalendarEvents_BeforeUpdateEvent e);
    
	public class DCalendarEvents_BeforeUpdateEvent 
	{
        
		public short cancel;
        
		public DCalendarEvents_BeforeUpdateEvent(short cancel) 
		{
			this.cancel = cancel;
		}
	}
    
	public delegate void DCalendarEvents_KeyUpEventHandler(object sender, DCalendarEvents_KeyUpEvent e);
    
	public class DCalendarEvents_KeyUpEvent 
	{
        
		public short keyCode;
        
		public short shift;
        
		public DCalendarEvents_KeyUpEvent(short keyCode, short shift) 
		{
			this.keyCode = keyCode;
			this.shift = shift;
		}
	}
    
	public delegate void DCalendarEvents_KeyPressEventHandler(object sender, DCalendarEvents_KeyPressEvent e);
    
	public class DCalendarEvents_KeyPressEvent 
	{
        
		public short keyAscii;
        
		public DCalendarEvents_KeyPressEvent(short keyAscii) 
		{
			this.keyAscii = keyAscii;
		}
	}
    
	public delegate void DCalendarEvents_KeyDownEventHandler(object sender, DCalendarEvents_KeyDownEvent e);
    
	public class DCalendarEvents_KeyDownEvent 
	{
        
		public short keyCode;
        
		public short shift;
        
		public DCalendarEvents_KeyDownEvent(short keyCode, short shift) 
		{
			this.keyCode = keyCode;
			this.shift = shift;
		}
	}
    
	public class AxCalendarEventMulticaster : MSACAL.DCalendarEvents 
	{
        //the private field is AxImp generated, we change it to protected
		//so our subclass can access this field
		//private AxCalendar parent;
		protected AxCalendar parent;
        
		public AxCalendarEventMulticaster(AxCalendar parent) 
		{
			this.parent = parent;
		}
        
		public virtual void NewYear() 
		{
			System.EventArgs newyearEvent = new System.EventArgs();
			this.parent.RaiseOnNewYear(this.parent, newyearEvent);
		}
        
		public virtual void NewMonth() 
		{
			System.EventArgs newmonthEvent = new System.EventArgs();
			this.parent.RaiseOnNewMonth(this.parent, newmonthEvent);
		}
        
		public virtual void AfterUpdate() 
		{
			System.EventArgs afterupdateEvent = new System.EventArgs();
			this.parent.RaiseOnAfterUpdate(this.parent, afterupdateEvent);
		}
        
		public virtual void BeforeUpdate(ref short cancel) 
		{
			DCalendarEvents_BeforeUpdateEvent beforeupdateEvent = new DCalendarEvents_BeforeUpdateEvent(cancel);
			this.parent.RaiseOnBeforeUpdate(this.parent, beforeupdateEvent);
			cancel = beforeupdateEvent.cancel;
		}
        
		public virtual void KeyUp(ref short keyCode, short shift) 
		{
			DCalendarEvents_KeyUpEvent keyupEvent = new DCalendarEvents_KeyUpEvent(keyCode, shift);
			this.parent.RaiseOnKeyUpEvent(this.parent, keyupEvent);
			keyCode = keyupEvent.keyCode;
		}
        
		public virtual void KeyPress(ref short keyAscii) 
		{
			DCalendarEvents_KeyPressEvent keypressEvent = new DCalendarEvents_KeyPressEvent(keyAscii);
			this.parent.RaiseOnKeyPressEvent(this.parent, keypressEvent);
			keyAscii = keypressEvent.keyAscii;
		}
        
		public virtual void KeyDown(ref short keyCode, short shift) 
		{
			DCalendarEvents_KeyDownEvent keydownEvent = new DCalendarEvents_KeyDownEvent(keyCode, shift);
			this.parent.RaiseOnKeyDownEvent(this.parent, keydownEvent);
			keyCode = keydownEvent.keyCode;
		}
        
		public virtual void DblClick() 
		{
			System.EventArgs dblclickEvent = new System.EventArgs();
			this.parent.RaiseOnDblClick(this.parent, dblclickEvent);
		}
       
		public virtual void Click() 
		{
			System.EventArgs clickEvent = new System.EventArgs();
			this.parent.RaiseOnClickEvent(this.parent, clickEvent);
		}
	}	
}
